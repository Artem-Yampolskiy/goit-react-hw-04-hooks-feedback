{"version":3,"sources":["components/Statistics/Statistics.jsx","components/feedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.jsx","index.js","components/Statistics/Statistics.module.css","components/feedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","styles","text","FeedbackOptions","options","onLeaveFeedback","container","map","option","type","onClick","button","prototype","PropTypes","arrayOf","oneOf","isRequired","func","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","feedback","countTotalFeedback","Object","values","reduce","stateQuantity","keys","stateName","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAuBeA,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,oBAAGC,UAAWC,IAAOC,KAArB,mBAAkCP,KAClC,oBAAGK,UAAWC,IAAOC,KAArB,sBAAqCN,KACrC,oBAAGI,UAAWC,IAAOC,KAArB,kBAAiCL,KACjC,oBAAGG,UAAWC,IAAOC,KAArB,oBAAmCJ,KACnC,oBAAGE,UAAWC,IAAOC,KAArB,gCAA+CH,EAA/C,W,gCCPNI,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,qBAAKL,UAAWC,IAAOK,UAAvB,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,QAAS,kBAAKL,EAAgBG,IAE9BR,UAAWC,IAAOU,OALpB,SAOGH,GALIA,WAajBL,EAAgBS,UAAY,CACxBR,QAASS,IAAUC,QAAQD,IAAUE,MAAM,CAAC,OAAQ,UAAW,SAASC,WACxEX,gBAAiBQ,IAAUI,KAAKD,YAGrBb,Q,gBCbAe,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASpB,UAAWC,IAAOK,UAA3B,UACE,oBAAIN,UAAWC,IAAOkB,MAAtB,SAA8BA,IAC7BC,MCEUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC0D3BC,MArDf,WACI,MAAwBC,mBAAS,GAAjC,mBAAO7B,EAAP,KAAa8B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO5B,EAAP,KAAgB8B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAO3B,EAAP,KAAY8B,EAAZ,KAEMC,EAAW,CAAEjC,OAAMC,UAASC,OAiB5BgC,EAAqB,kBACvBC,OAAOC,OAAOH,GAAUI,QAAO,SAAClC,EAAOmC,GAAR,OAA0BnC,EAAQmC,IAAe,IAMhF,OACI,qCACI,cAAC,EAAD,CAASd,MAAM,wBAAf,SACI,cAAC,EAAD,CACIf,QAAS0B,OAAOI,KAAKN,GACrBvB,gBA3BM,SAAA8B,GACtB,OAAQA,GACJ,IAAK,OACDV,EAAQ9B,EAAO,GACf,MACJ,IAAK,UACD+B,EAAW9B,EAAU,GACrB,MACJ,IAAK,MACD+B,EAAO9B,EAAM,SAqBb,cAAC,EAAD,CAASsB,MAAM,aAAf,SACKU,IAAuB,EACpB,cAAC,EAAD,CACIlC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO+B,IACP9B,mBAlBpB8B,IAAuBO,KAAKC,MAAc,IAAP1C,EAAckC,KAAwB,IAoBzD,cAAC,EAAD,CAAcP,QAAQ,4BChD9CgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,OAAS,kC,kBCA1ED,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,0B","file":"static/js/main.8477121f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p className={styles.text}>Good: {good}</p>\r\n            <p className={styles.text}>Neutral: {neutral}</p>\r\n            <p className={styles.text}>Bad: {bad}</p>\r\n            <p className={styles.text}>Total: {total}</p>\r\n            <p className={styles.text}>Positive Feedback: {positivePercentage}%</p>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        {options.map(option => (\r\n          <button\r\n            type=\"button\"\r\n            key={option}\r\n            onClick={()=> onLeaveFeedback(option)\r\n            }\r\n            className={styles.button}\r\n          >\r\n            {option}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.prototype = {\r\n    options: PropTypes.arrayOf(PropTypes.oneOf(['good', 'neutral', 'bad'])).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={styles.container}>\r\n    <h2 className={styles.title}>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import { useState } from 'react';\r\n\r\nimport Statistics from './components/Statistics';\r\nimport FeedbackOptions from './components/feedbackOptions';\r\nimport Section from './components/Section';\r\nimport Notification from './components/Notification';\r\n\r\nfunction App () {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n    \r\n    const feedback = { good, neutral, bad };\r\n\r\n    const incrementFeedback = stateName => {\r\n        switch (stateName) {\r\n            case 'good':\r\n                setGood(good + 1);\r\n                break;\r\n            case 'neutral':\r\n                setNeutral(neutral + 1);\r\n                break;\r\n            case 'bad':\r\n                setBad(bad + 1);\r\n                break;\r\n            default:\r\n        }\r\n    };\r\n\r\n    const countTotalFeedback = () =>\r\n        Object.values(feedback).reduce((total, stateQuantity) => total + stateQuantity, 0,);\r\n    \r\n    const countPositiveFeedbackPercentage = () =>\r\n        countTotalFeedback() ? Math.round((good * 100) / countTotalFeedback()) : 0;\r\n\r\n\r\n        return (\r\n            <>\r\n                <Section title=\"Please leave feedback\">\r\n                    <FeedbackOptions\r\n                        options={Object.keys(feedback)}\r\n                        onLeaveFeedback={incrementFeedback}\r\n                    />\r\n                </Section>\r\n                <Section title=\"Statistics\">\r\n                    {countTotalFeedback() > 0 ? (\r\n                        <Statistics\r\n                            good={good}\r\n                            neutral={neutral}\r\n                            bad={bad}\r\n                            total={countTotalFeedback()}\r\n                            positivePercentage={countPositiveFeedbackPercentage()}\r\n                        />) : (\r\n                        <Notification message=\"No feedback given\" />\r\n                    )}\r\n                </Section>\r\n            </>\r\n        );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__nMNoB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__1WaNi\",\"button\":\"FeedbackOptions_button__1XZ4U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1WcQJ\",\"title\":\"Section_title__2XjPO\"};"],"sourceRoot":""}